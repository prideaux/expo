{"version":3,"file":"configureIosSplashScreen.js","sourceRoot":"","sources":["../src/configureIosSplashScreen.ts"],"names":[],"mappings":"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","sourcesContent":["import { projectConfig } from '@react-native-community/cli-platform-ios';\nimport chalk from 'chalk';\nimport colorString from 'color-string';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ResizeMode } from './constants';\nimport { replaceOrInsertInFile, writeToFile, COMMENTS } from './file-helpers';\nimport { project as PbxProject } from './xcode';\n\nconst FILENAMES = {\n  SPLASH_SCREEN_PNG: 'splashscreen.png',\n};\n// each filename is relational according to iOS root project directory\nconst FILES_PATHS = {\n  INFO_PLIST: 'Info.plist',\n  STORYBOARD: './SplashScreen.storyboard',\n  IMAGESET: './Images.xcassets/SplashScreen.imageset',\n  IMAGESET_CONTENTS: './Images.xcassets/SplashScreen.imageset/Contents.json',\n  PNG: `./Images.xcassets/SplashScreen.imageset/${FILENAMES.SPLASH_SCREEN_PNG}`,\n};\n\n/**\n * Configures [INFO_PLIST] to show [STORYBOARD] filename as Splash/Launch Screen.\n */\nasync function configureInfoPlist(iosProjectPath: string) {\n  await replaceOrInsertInFile(path.resolve(iosProjectPath, FILES_PATHS.INFO_PLIST), {\n    replaceContent: '<string>SplashScreen</string>',\n    replacePattern: /(?<=<key>UILaunchStoryboardName<\\/key>(.|\\n)*?)<string>.*?<\\/string>/m,\n    insertContent: `  <key>UILaunchStoryboardName</key>\\n  <string>SplashScreen</string>\\n`,\n    insertPattern: /<\\/dict>/gm,\n    insertBeforeLastOccurrence: true,\n  });\n}\n\n/**\n * Creates [STORYBOARD] file containing ui description of Splash/Launch Screen.\n */\nasync function configureStoryboard(\n  iosProjectPath: string,\n  resizeMode: ResizeMode,\n  backgroundColor: string,\n  splashScreenImagePresent: boolean\n) {\n  let contentMode: string;\n  switch (resizeMode) {\n    case ResizeMode.CONTAIN:\n      contentMode = 'scaleAspectFit';\n      break;\n    case ResizeMode.COVER:\n      contentMode = 'scaleAspectFill';\n      break;\n    default:\n      console.log(\n        chalk.red(`resizeMode = ${chalk.yellow(resizeMode)} is not supported for iOS platform.`)\n      );\n      return;\n  }\n\n  const color = colorString.get(backgroundColor)?.value;\n  if (!color) {\n    console.log(chalk.red(`backgroundColor is invalid.`));\n    return;\n  }\n\n  const [r, g, b, a] = color;\n  const red = r / 255;\n  const green = g / 255;\n  const blue = b / 255;\n  const alpha = a;\n\n  await writeToFile(\n    path.resolve(iosProjectPath, FILES_PATHS.STORYBOARD),\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n${COMMENTS.wrapXML(COMMENTS.FILE_TOP_NO_MODIFY)}\n<document\n  type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\"\n  version=\"3.0\"\n  toolsVersion=\"15705\"\n  targetRuntime=\"iOS.CocoaTouch\"\n  propertyAccessControl=\"none\"\n  useAutolayout=\"YES\"\n  launchScreen=\"YES\"\n  useTraitCollections=\"YES\"\n  useSafeAreas=\"YES\"\n  colorMatched=\"YES\"\n  initialViewController=\"EXPO-VIEWCONTROLLER-1\"\n>\n  <device id=\"retina6_1\" orientation=\"portrait\" appearance=\"light\"/>\n  <dependencies>\n    <deployment identifier=\"iOS\"/>\n    <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"15706\"/>\n    <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>\n  </dependencies>\n  <scenes>\n    <!--View Controller-->\n    <scene sceneID=\"EXPO-SCENE-1\">\n      <objects>\n        <viewController\n          storyboardIdentifier=\"SplashScreenViewController\"\n          id=\"EXPO-VIEWCONTROLLER-1\"\n          sceneMemberID=\"viewController\"\n        >\n          <imageView\n            key=\"view\"\n            clipsSubviews=\"YES\"\n            userInteractionEnabled=\"NO\"\n            contentMode=\"${contentMode}\"\n            horizontalHuggingPriority=\"251\"\n            verticalHuggingPriority=\"251\"\n            ${splashScreenImagePresent ? 'image=\"SplashScreen\"' : ''}\n            id=\"EXPO-IMAGEVIEW-1\"\n          >\n            <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"800\" height=\"1600\"/>\n            <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>\n            <color key=\"backgroundColor\" red=\"${red}\" green=\"${green}\" blue=\"${blue}\" alpha=\"${alpha}\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>\n          </imageView>\n          <size key=\"freeformSize\" width=\"800\" height=\"1600\"/>\n        </viewController>\n        <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"EXPO-PLACEHOLDER-1\" userLabel=\"First Responder\" sceneMemberID=\"firstResponder\"/>\n      </objects>\n      <point key=\"canvasLocation\" x=\"141\" y=\"130\"/>\n    </scene>\n  </scenes>\n  <resources>\n    <image name=\"SplashScreen\" width=\"600\" height=\"1200\"/>\n  </resources>\n</document>\n`\n  );\n}\n\n/**\n * Creates [IMAGESET] containing image for Splash/Launch Screen.\n */\nasync function configureAssets(iosProjectPath: string, imagePath?: string) {\n  const imageSetPath = path.resolve(iosProjectPath, FILES_PATHS.IMAGESET);\n\n  // ensure old SplashScreen imageSet is removed\n  if (await fs.pathExists(imageSetPath)) {\n    await fs.remove(imageSetPath);\n  }\n\n  if (imagePath) {\n    await fs.mkdirp(imageSetPath);\n    const contentJson = {\n      images: [\n        {\n          idiom: 'universal',\n          filename: FILENAMES.SPLASH_SCREEN_PNG,\n          scale: '1x',\n        },\n        {\n          idiom: 'universal',\n          scale: '2x',\n        },\n        {\n          idiom: 'universal',\n          scale: '3x',\n        },\n      ],\n      info: {\n        version: 1,\n        author: 'xcode',\n      },\n    };\n\n    await fs.writeFile(\n      path.resolve(iosProjectPath, FILES_PATHS.IMAGESET_CONTENTS),\n      JSON.stringify(contentJson, null, 2)\n    );\n\n    await fs.copyFile(imagePath, path.resolve(iosProjectPath, FILES_PATHS.PNG));\n  }\n}\n\n/**\n * Reads iOS project and locates `.pbxproj` file for further parsing and modifications.\n */\nasync function readIosProject(\n  projectRootPath: string\n): Promise<{\n  projectName: string;\n  /**\n   * Root path to directory containing project source files.\n   */\n  projectPath: string;\n  /**\n   * pbxProject reference that allows to modify `.pbxproj` file.\n   */\n  pbxProject: PbxProject;\n  /**\n   * .pbxproj loader that parses `.pbxproj` from filesystem and enabled operation on pbxProject.\n   */\n  loadPbxProject: () => Promise<void>;\n}> {\n  const config = projectConfig(projectRootPath, { plist: [] });\n  if (!config) {\n    throw new Error(chalk.red(`Couldn't find iOS project. Cannot configure iOS.`));\n  }\n\n  const { projectPath: xcodeProjPath, pbxprojPath } = config;\n\n  // xcodeProjPath contains path to .xcodeproj directory\n  if (!xcodeProjPath.endsWith('.xcodeproj')) {\n    throw new Error(chalk.red(`Couldn't find .xcodeproj directory.`));\n  }\n  const projectPath = xcodeProjPath.substring(0, xcodeProjPath.length - '.xcodeproj'.length);\n  const projectName = path.basename(projectPath);\n  const pbxProject = new PbxProject(pbxprojPath);\n\n  return {\n    projectName,\n    projectPath,\n    pbxProject,\n    loadPbxProject: () =>\n      new Promise(resolve =>\n        pbxProject.parse(err => {\n          if (err) {\n            throw new Error(`${chalk.red('.pbxproj file parsing issue:')} ${err.message}.`);\n          }\n          resolve();\n        })\n      ),\n  };\n}\n\n/**\n * Modifies `.pbxproj` by:\n * - adding reference for `.storyboard` file\n */\nfunction updatePbxProject(pbxProject: PbxProject, projectName: string): void {\n  const applicationNativeTarget = pbxProject.getTarget('com.apple.product-type.application');\n  if (!applicationNativeTarget) {\n    throw new Error(chalk.red(`Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`));\n  }\n\n  if (applicationNativeTarget.target.name !== projectName) {\n    throw new Error(\n      chalk.red(\n        `Application native target name mismatch. Expected ${chalk.yellow(\n          projectName\n        )}, but found ${chalk.yellow(applicationNativeTarget.target.name)}.`\n      )\n    );\n  }\n\n  // Check if `${projectName}/SplashScreen.storyboard` already exists\n  // Path relative to `ios` directory\n  const storyboardFilePath = path.join(projectName, FILES_PATHS.STORYBOARD);\n  if (!pbxProject.hasFile(storyboardFilePath)) {\n    const group = pbxProject.findPBXGroupKey({ name: projectName });\n    if (!group) {\n      throw new Error(chalk.red(`Couldn't locate proper PBXGroup '.xcodeproj' file.`));\n    }\n    pbxProject.addStoryboardFile(storyboardFilePath, {\n      target: applicationNativeTarget.uuid,\n      group,\n    });\n  }\n}\n\nexport default async function configureIosSplashScreen({\n  imagePath,\n  resizeMode,\n  backgroundColor,\n}: {\n  imagePath?: string;\n  resizeMode: ResizeMode;\n  backgroundColor: string;\n}) {\n  const projectRootPath = path.resolve();\n  const { projectPath, pbxProject, loadPbxProject, projectName } = await readIosProject(\n    projectRootPath\n  );\n\n  await Promise.all([\n    loadPbxProject(),\n    configureInfoPlist(projectPath),\n    configureStoryboard(projectPath, resizeMode, backgroundColor, !!imagePath),\n    configureAssets(projectPath, imagePath),\n  ]);\n\n  updatePbxProject(pbxProject, projectName);\n\n  await fs.writeFile(pbxProject.filepath, pbxProject.writeSync());\n}\n"]}