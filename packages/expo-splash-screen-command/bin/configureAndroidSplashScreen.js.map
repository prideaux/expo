{"version":3,"file":"configureAndroidSplashScreen.js","sourceRoot":"","sources":["../src/configureAndroidSplashScreen.ts"],"names":[],"mappings":"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","sourcesContent":["import { projectConfig } from '@react-native-community/cli-platform-android';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ResizeMode } from './constants';\nimport {\n  writeOrReplaceOrInsertInFile,\n  writeToFile,\n  replaceOrInsertInFile,\n  insertToFile,\n  COMMENTS,\n} from './file-helpers';\n\nconst FILENAMES = {\n  SPLASH_SCREEN_PNG: 'splashscreen_image.png',\n};\nconst DRAWABLES_CONFIGS = {\n  default: {\n    path: `./res/drawable/${FILENAMES.SPLASH_SCREEN_PNG}`,\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    path: `./res/drawable-mdpi/${FILENAMES.SPLASH_SCREEN_PNG}`,\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    path: `./res/drawable-hdpi/${FILENAMES.SPLASH_SCREEN_PNG}`,\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    path: `./res/drawable-xhdpi/${FILENAMES.SPLASH_SCREEN_PNG}`,\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    path: `./res/drawable-xxhdpi/${FILENAMES.SPLASH_SCREEN_PNG}`,\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    path: `./res/drawable-xxxhdpi/${FILENAMES.SPLASH_SCREEN_PNG}`,\n    dimensionsMultiplier: 4,\n  },\n};\nconst FILES_PATHS = {\n  DRAWABLE_DIRECTORY: './res/drawable',\n  SPLASH_SCREEN_DRAWABLE: `./res/drawable/${FILENAMES.SPLASH_SCREEN_PNG}`,\n  SPLASH_SCREEN_COLORS: './res/values/colors_splashscreen.xml',\n  SPLASH_SCREEN_XML: './res/drawable/splashscreen.xml',\n  STYLES: './res/values/styles_splashscreen.xml',\n  ANDROID_MANIFEST: './AndroidManifest.xml',\n};\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n */\nasync function configureSplashScreenDrawables(\n  androidMainPath: string,\n  splashScreenImagePath?: string\n) {\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ path: drawbalePath }) => {\n      if (await fs.pathExists(path.resolve(androidMainPath, drawbalePath))) {\n        await fs.remove(path.resolve(androidMainPath, drawbalePath));\n      }\n    })\n  );\n\n  if (splashScreenImagePath) {\n    if (!(await fs.pathExists(path.resolve(androidMainPath, FILES_PATHS.DRAWABLE_DIRECTORY)))) {\n      await fs.mkdir(path.resolve(androidMainPath, FILES_PATHS.DRAWABLE_DIRECTORY));\n    }\n    await fs.copyFile(\n      splashScreenImagePath,\n      path.resolve(androidMainPath, FILES_PATHS.SPLASH_SCREEN_DRAWABLE)\n    );\n  }\n}\n\nasync function configureColorsXML(androidMainPath: string, splashScreenBackgroundColor: string) {\n  await writeOrReplaceOrInsertInFile(\n    path.resolve(androidMainPath, FILES_PATHS.SPLASH_SCREEN_COLORS),\n    {\n      fileContent: `${COMMENTS.wrapXML(COMMENTS.FILE_TOP)}\n<resources>\n  <color name=\"splashscreen_background\">${splashScreenBackgroundColor}</color> ${COMMENTS.wrapXML(\n        COMMENTS.LINE\n      )}\n</resources>\n  `,\n      replaceContent: `  <color name=\"splashscreen_background\">${splashScreenBackgroundColor}</color> ${COMMENTS.wrapXML(\n        COMMENTS.LINE\n      )}}\\n`,\n      replacePattern: /(?<=(?<openingTagLine>^.*?<resources>.*?$\\n)(?<beforeLines>(?<beforeLine>^.*$\\n)*?))(?<colorLine>^.*?(?<color><color name=\"splashscreen_background\">.*<\\/color>).*$\\n)(?=(?<linesAfter>(?<afterLine>^.*$\\n)*?)(?<closingTagLine>^.*?<\\/resources>.*?$\\n))/m,\n\n      insertContent: `  <color name=\"splashscreen_background\">${splashScreenBackgroundColor}</color> ${COMMENTS.wrapXML(\n        COMMENTS.LINE\n      )}}\\n`,\n      insertPattern: /^(.*?)<\\/resources>(.*?)$/m,\n    }\n  );\n}\n\nasync function configureDrawableXML(androidMainPath: string, resizeMode: ResizeMode) {\n  const nativeSplashScreen: string =\n    resizeMode !== ResizeMode.NATIVE\n      ? ''\n      : `\n\n  <item>\n    <bitmap\n      android:gravity=\"center\"\n      android:src=\"@drawable/splashscreen_image\"\n    />\n  </item>`;\n\n  await writeToFile(\n    path.resolve(androidMainPath, FILES_PATHS.SPLASH_SCREEN_XML),\n    `${COMMENTS.wrapXML(COMMENTS.FILE_TOP_NO_MODIFY)}\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n  <item android:drawable=\"@color/splashscreen_background\"/>${nativeSplashScreen}\n</layer-list>\n`\n  );\n}\n\nasync function configureStylesXML(androidMainPath: string) {\n  await writeOrReplaceOrInsertInFile(path.resolve(androidMainPath, FILES_PATHS.STYLES), {\n    fileContent: `${COMMENTS.wrapXML(COMMENTS.FILE_TOP)}\n<resources>\n  <style name=\"Theme.App.SplashScreen\" parent=\"Theme.AppCompat.Light.NoActionBar\"> ${COMMENTS.wrapXML(\n    COMMENTS.LINE\n  )}\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item> ${COMMENTS.wrapXML(\n      COMMENTS.LINE\n    )}\n    <!-- Customize your splash screen theme here -->\n  </style>\n</resources>\n`,\n    replaceContent: `    <item name=\"android:windowBackground\">@drawable/splashscreen</item> ${COMMENTS.wrapXML(\n      COMMENTS.LINE\n    )}\\n`,\n    replacePattern: /(?<=(?<styleNameLine>^.*?(?<styleName><style name=\"Theme\\.App\\.SplashScreen\" parent=\".*?\">).*?$\\n)(?<linesBeforeWindowBackgroundLine>(?<singleBeforeLine>^.*$\\n)*?))(?<windowBackgroundLine>^.*?(?<windowBackground><item name=\"android:windowBackground\">.*<\\/item>).*$\\n)(?=(?<linesAfterWindowBackgroundLine>(?<singleAfterLine>^.*$\\n)*?)(?<closingTagLine>^.*?<\\/style>.*?$\\n))/m,\n\n    insertContent: `  <style name=\"Theme.App.SplashScreen\" parent=\"Theme.AppCompat.Light.NoActionBar\"> ${COMMENTS.wrapXML(\n      COMMENTS.LINE\n    )}\n    <item name=\"android:windowBackground\">@drawable/splashscreen</item> ${COMMENTS.wrapXML(\n      COMMENTS.LINE\n    )}\n  </style>\n`,\n    insertPattern: /^(.*?)<\\/resources>(.*?)$/m,\n  });\n}\n\nasync function configureAndroidManifestXML(androidMainPath: string) {\n  const androidManifestPath = path.resolve(androidMainPath, FILES_PATHS.ANDROID_MANIFEST);\n\n  const r1 = await replaceOrInsertInFile(androidManifestPath, {\n    replaceContent: `android:theme=\"@style/Theme.App.SplashScreen\"`,\n    replacePattern: /(?<nameBeforeTheme>(?<=(?<application1>^.*?<application(.*|\\n)*?)(?<activity1>^.*?<activity(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?))(?<androidTheme1>android:theme=\".*?\"\\s*?))|((?<=(?<application2>^.*?<application(.|\\n)*?)(?<activity2>^.*?<activity(.|\\n)*?))(?<androidTheme2>android:theme=\".*?\"\\s*?)(?=((.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?)))/m,\n\n    insertContent: `\\n      android:theme=\"@style/Theme.App.SplashScreen\"`,\n    insertPattern: /(?<=(?<application>^.*?<application(.*|\\n)*?)(?<activity>^.*?<activity))(?<activityAttributes>(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?>)/m,\n  });\n\n  const r2 = await replaceOrInsertInFile(androidManifestPath, {\n    replaceContent: `\\n\\n    ${COMMENTS.wrapXML(COMMENTS.ANDROID_MANIFEST)}\\n`,\n    replacePattern: RegExp(\n      `(?<=(?<application>^.*?<application(.|\\n)*?))([\\n\\t ])*(?<comment>${COMMENTS.wrapXML(\n        COMMENTS.ANDROID_MANIFEST\n      ).replace(\n        /[-/\\\\^$*+?.()|[\\]{}]/g,\n        '\\\\$&' // eslint-disable-next-line no-useless-escape\n      )})([\\n\\t ])*(?=(?<activity>(^.*?<activity)(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?>))`,\n      'm'\n    ),\n\n    insertContent: `\\n    ${COMMENTS.wrapXML(COMMENTS.ANDROID_MANIFEST)}\\n`,\n    insertPattern: /(?<=(?<application>^.*?<application(.|\\n)*?))(?<activity>(^.*?<activity)(.|\\n)*?android:name=\"\\.MainActivity\"(.|\\n)*?>)/m,\n  });\n\n  if (!r1.inserted && !r1.replaced && !r2.inserted && r2.replaced) {\n    console.log(\n      chalk.yellow(\n        `${chalk.magenta(\n          'AndroidManifest.xml'\n        )} does not contain <activity /> entry for ${chalk.magenta(\n          'MainActivity'\n        )}. SplashScreen style will not be applied.`\n      )\n    );\n  }\n}\n\n/**\n * Injects specific code to MainActivity that would trigger SplashScreen mounting process.\n */\nasync function configureShowingSplashScreen(projectRootPath: string, resizeMode: ResizeMode) {\n  // eslint-disable-next-line\n  const mainApplicationPath = projectConfig(projectRootPath)?.mainFilePath;\n\n  if (!mainApplicationPath) {\n    console.log(chalk.red(`Failed to configure 'MainActivity'.`));\n    return;\n  }\n\n  const mainActivityPathJava = path.resolve(mainApplicationPath, '../MainActivity.java');\n  const mainActivityPathKotlin = path.resolve(mainApplicationPath, '../MainActivity.kt');\n\n  const isJava = await fs.pathExists(mainActivityPathJava);\n  const isKotlin = !isJava && (await fs.pathExists(mainActivityPathKotlin));\n\n  if (isJava) {\n    // handle imports\n    await replaceOrInsertInFile(mainActivityPathJava, {\n      replacePattern: /^import expo\\.modules\\.splashscreen\\.SplashScreen;.*?\\nimport expo\\.modules\\.splashscreen\\.SplashScreenImageResizeMode;.*?$/m,\n      replaceContent: `import expo.modules.splashscreen.SplashScreen;\\nimport expo.modules.splashscreen.SplashScreenImageResizeMode;`,\n      insertPattern: /(?=public class .* extends .* {.*$)/m,\n      insertContent: `import expo.modules.splashscreen.SplashScreen;\\nimport expo.modules.splashscreen.SplashScreenImageResizeMode;\\n\\n`,\n    });\n    await replaceOrInsertInFile(mainActivityPathJava, {\n      replacePattern: /^import com\\.facebook\\.react\\.ReactRootView;.*?$/m,\n      replaceContent: `import com.facebook.react.ReactRootView;`,\n      insertPattern: /(?<=import com\\.facebook\\.react\\.ReactActivity;.*?$)/m,\n      insertContent: `\\nimport com.facebook.react.ReactRootView;`,\n    });\n\n    // handle onCreate\n    const r = await replaceOrInsertInFile(mainActivityPathJava, {\n      replacePattern: /(?<=super\\.onCreate(.|\\n)*?)SplashScreen\\.show\\(this, SplashScreenImageResizeMode\\..*\\);.*$/m, // super.onCreate has to be called first\n      replaceContent: `SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView.class); ${COMMENTS.wrapJavaKotlin(\n        COMMENTS.LINE\n      )}`,\n      insertPattern: /(?<=^.*super\\.onCreate.*$)/m, // insert just below super.onCreate\n      insertContent: `\\n    // SplashScreen.show(...) has to called after super.onCreate(...)\\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView.class); ${COMMENTS.wrapJavaKotlin(\n        COMMENTS.LINE\n      )}`,\n    });\n\n    if (!r.replaced && !r.inserted) {\n      // handle if sth went wrong\n      // no previously defined onCreate -> insert basic one\n      await insertToFile(mainActivityPathJava, {\n        insertPattern: /(?<=public class .* extends .* {.*$)/m,\n        insertContent: `\\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    // SplashScreen.show(...) has to called after super.onCreate(...)\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView.class); ${COMMENTS.wrapJavaKotlin(\n          COMMENTS.LINE\n        )}\n  }\\n`,\n      });\n      // with additional bundle import at the top\n      await replaceOrInsertInFile(mainActivityPathJava, {\n        replacePattern: /import android\\.os\\.Bundle;/m,\n        replaceContent: 'import android.os.Bundle;',\n        insertPattern: /(?<=(^.*?package .*?$))/m,\n        insertContent: `\\n\\nimport android.os.Bundle;`,\n      });\n    }\n\n    return;\n  }\n\n  if (isKotlin) {\n    // handle imports\n    await replaceOrInsertInFile(mainActivityPathKotlin, {\n      replacePattern: /^import expo\\.modules\\.splashscreen\\.SplashScreen.*?\\nimport expo\\.modules\\.splashscreen\\.SplashScreenImageResizeMode.*?$/m,\n      replaceContent: `import expo.modules.splashscreen.SplashScreen\\nimport expo.modules.splashscreen.SplashScreenImageResizeMode`,\n      insertPattern: /(?=class .* : .* {.*$)/m,\n      insertContent: `import expo.modules.splashscreen.SplashScreen\\nimport expo.modules.splashscreen.SplashScreenImageResizeMode\\n\\n`,\n    });\n    await replaceOrInsertInFile(mainActivityPathKotlin, {\n      replacePattern: /^import com\\.facebook\\.react\\.ReactRootView.*?$/m,\n      replaceContent: `import com.facebook.react.ReactRootView`,\n      insertPattern: /(?<=import com\\.facebook\\.react\\.ReactActivity.*?$)/m,\n      insertContent: `\\nimport com.facebook.react.ReactRootView`,\n    });\n\n    // handle onCreate\n    const r = await replaceOrInsertInFile(mainActivityPathKotlin, {\n      replacePattern: /(?<=super\\.onCreate(.|\\n)*?)SplashScreen\\.show\\(this, SplashScreenImageResizeMode\\..*\\).*$/m, // super.onCreate has to be called first\n      replaceContent: `SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView::class.java) ${COMMENTS.wrapJavaKotlin(\n        COMMENTS.LINE\n      )}`,\n      insertPattern: /(?<=^.*super\\.onCreate.*$)/m, // insert just below super.onCreate\n      insertContent: `\\n    // SplashScreen.show(...) has to called after super.onCreate(...)\\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView::class.java) ${COMMENTS.wrapJavaKotlin(\n        COMMENTS.LINE\n      )}`,\n    });\n\n    if (!r.replaced && !r.inserted) {\n      // no previously defined onCreate -> insert basic one\n      await insertToFile(mainActivityPathKotlin, {\n        insertPattern: /(?<=class .* : .* {.*$)/m,\n        insertContent: `\\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    // SplashScreen.show(...) has to called after super.onCreate(...)\n    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView::class.java) ${COMMENTS.wrapJavaKotlin(\n          COMMENTS.LINE\n        )}\n  }\\n`,\n      });\n      // with additional bundle import at the top\n      await replaceOrInsertInFile(mainActivityPathKotlin, {\n        replacePattern: /import android\\.os\\.Bundle/m,\n        replaceContent: 'import android.os.Bundle',\n        insertPattern: /(?<=(^.*?package .*?$))/m,\n        insertContent: `\\n\\nimport android.os.Bundle`,\n      });\n    }\n\n    return;\n  }\n\n  console.log(chalk.red(`Failed to configure 'MainActivity'.`));\n}\n\nexport default async function configureAndroidSplashScreen({\n  imagePath,\n  resizeMode,\n  backgroundColor,\n}: {\n  imagePath?: string;\n  resizeMode: ResizeMode;\n  backgroundColor: string;\n}) {\n  const projectRootPath = path.resolve();\n  const androidMainPath = path.resolve(projectRootPath, 'android/app/src/main');\n\n  return Promise.all([\n    configureSplashScreenDrawables(androidMainPath, imagePath),\n    configureColorsXML(androidMainPath, backgroundColor),\n    configureDrawableXML(androidMainPath, resizeMode),\n    configureStylesXML(androidMainPath),\n    configureAndroidManifestXML(androidMainPath),\n    configureShowingSplashScreen(projectRootPath, resizeMode),\n  ]).then(() => {});\n}\n"]}