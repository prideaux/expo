{"version":3,"file":"file-helpers.js","sourceRoot":"","sources":["../src/file-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// runtime polyfills\nimport 'core-js/es/string/match-all';\n\nimport fs from 'fs-extra';\nimport path from 'path';\n\nexport const COMMENTS = {\n  wrapXML: (comment: string) => `<!-- ${comment} -->`,\n  wrapJavaKotlin: (comment: string) => `// ${comment}`,\n\n  LINE: `This line is handled by 'expo-splash-screen' command and it's discouraged to modify it manually`,\n  FILE_TOP: `\\n    This file was created by 'expo-splash-screen' and some of it's content shouldn't be modified by hand\\n`,\n  FILE_TOP_NO_MODIFY: `\\n    This file was created by 'expo-splash-screen' command and it's discouraged to modify it manually\\n`,\n  ANDROID_MANIFEST: `This Activity's 'android:theme' attribute is handled by 'expo-splash-screen' command and it's discouraged to modify it manually`,\n};\n\n/**\n * Modifies file's content if either `replacePattern` or `insertPattern` matches.\n * If `replacePatten` matches `replaceContent` is used, otherwise if `insertPattern` matches `insertContent` is used.\n * `insertBeforeLastOccurrence` - flag that indicates whether to insert before first or last occurrence.\n * @returns object describing which operation is successful.\n */\nexport async function replaceOrInsertInFile(\n  filePath: string,\n  {\n    replaceContent,\n    replacePattern,\n    insertContent,\n    insertPattern,\n    insertBeforeLastOccurrence,\n  }: {\n    replaceContent: string;\n    replacePattern: RegExp | string;\n    insertContent: string;\n    insertPattern: RegExp | string;\n    insertBeforeLastOccurrence?: boolean;\n  }\n): Promise<{ replaced: boolean; inserted: boolean }> {\n  const insertFunction = insertBeforeLastOccurrence\n    ? insertToFileBeforeLastOccurrence\n    : insertToFile;\n  const replaced = await replaceInFile(filePath, { replaceContent, replacePattern });\n  const inserted = !replaced && (await insertFunction(filePath, { insertContent, insertPattern }));\n  return { replaced, inserted };\n}\n\n/**\n * Tries to do following actions:\n * - when file doesn't exist or is empty - create it with given fileContent,\n * - when file does exist and contains provided replacePattern - replace replacePattern with replaceContent,\n * - when file does exist and doesn't contain provided replacePattern - insert given insertContent before first match of insertPattern,\n * - when insertPattern does not occur in the file - append insertContent to the end of the file.\n * @returns object describing which operation is successful.\n */\nexport async function writeOrReplaceOrInsertInFile(\n  filePath: string,\n  {\n    fileContent,\n    replaceContent,\n    replacePattern,\n    insertContent,\n    insertPattern,\n  }: {\n    fileContent: string;\n    replaceContent: string;\n    replacePattern: RegExp | string;\n    insertContent: string;\n    insertPattern: RegExp | string;\n  }\n): Promise<{ created?: boolean; replaced?: boolean; inserted?: boolean }> {\n  if (!(await fs.pathExists(filePath)) || !/\\S/m.test(await fs.readFile(filePath, 'utf8'))) {\n    await writeToFile(filePath, fileContent);\n    return { created: true };\n  }\n\n  const { replaced, inserted } = await replaceOrInsertInFile(filePath, {\n    replaceContent,\n    replacePattern,\n    insertContent,\n    insertPattern,\n  });\n  if (replaced || inserted) {\n    return { replaced, inserted };\n  }\n\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n  await fs.writeFile(filePath, `${originalFileContent}${insertPattern}`);\n  return { inserted: true };\n}\n\n/**\n * Overrides or creates file (with possibly missing directories) with given content.\n */\nexport async function writeToFile(filePath: string, fileContent: string) {\n  const fileDirnamePath = path.dirname(filePath);\n  if (!(await fs.pathExists(fileDirnamePath))) {\n    await fs.mkdirp(fileDirnamePath);\n  }\n  return await fs.writeFile(filePath, fileContent);\n}\n\n/**\n * @returns `true` if replacement is successful, `false` otherwise.\n */\nexport async function replaceInFile(\n  filePath: string,\n  { replaceContent, replacePattern }: { replaceContent: string; replacePattern: string | RegExp }\n) {\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n  const replacePatternOccurrence = originalFileContent.search(replacePattern);\n  if (replacePatternOccurrence !== -1) {\n    await fs.writeFile(filePath, originalFileContent.replace(replacePattern, replaceContent));\n    return true;\n  }\n  return false;\n}\n\n/**\n * Inserts content just before first occurrence of provided pattern.\n * @returns `true` if insertion is successful, `false` otherwise.\n */\nexport async function insertToFile(\n  filePath: string,\n  { insertContent, insertPattern }: { insertContent: string; insertPattern: RegExp | string }\n) {\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n  const insertPatternOccurrence = originalFileContent.search(insertPattern);\n  if (insertPatternOccurrence !== -1) {\n    await fs.writeFile(\n      filePath,\n      `${originalFileContent.slice(\n        0,\n        insertPatternOccurrence\n      )}${insertContent}${originalFileContent.slice(insertPatternOccurrence)}`\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Finds last occurrence of provided pattern and inserts content just before it.\n * @return `true` is insertion is successful, `false` otherwise.\n */\nexport async function insertToFileBeforeLastOccurrence(\n  filePath: string,\n  { insertContent, insertPattern }: { insertContent: string; insertPattern: RegExp | string }\n) {\n  const originalFileContent = await fs.readFile(filePath, 'utf8');\n\n  const results = [...originalFileContent.matchAll(new RegExp(insertPattern, 'gm'))];\n  const patternLastOccurrence = results[results.length - 1];\n  if (!patternLastOccurrence) {\n    return false;\n  }\n  await fs.writeFile(\n    filePath,\n    `${originalFileContent.slice(\n      0,\n      patternLastOccurrence.index\n    )}${insertContent}${originalFileContent.slice(patternLastOccurrence.index)}`\n  );\n  return true;\n}\n"]}